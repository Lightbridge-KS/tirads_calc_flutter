# Dart & Flutter Application Build GitHub Action

name: Dart & Flutter Build

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*' # This will trigger the workflow when you push a tag starting with 'v'
  pull_request:
    branches: [ "main" ]

jobs:
  build-app:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
        sdk: [3.7.2]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: ${{ matrix.sdk }}
      - run: dart --version

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
            channel: stable
            flutter-version-file: pubspec.yaml # path to pubspec.yaml
      - run: flutter --version

      - name: Install dependencies
        run: | 
            flutter pub get
            flutter --version

      # Extract version from pubspec.yaml for the installer
      - name: Extract version
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $pubspecContent = Get-Content -Path pubspec.yaml -Raw
          if ($pubspecContent -match "version:\s*([\d\.]+)(\+\d+)?") {
            $version = $Matches[1]
            echo "APP_VERSION=$version" | Out-File -FilePath $Env:GITHUB_ENV -Append
          } else {
            echo "APP_VERSION=1.0.0" | Out-File -FilePath $Env:GITHUB_ENV -Append
          }


      # Enable the required platform
      - name: Enable Windows platform support
        if: matrix.os == 'windows-latest'
        run: flutter config --enable-windows-desktop
        
      - name: Enable macOS platform support
        if: matrix.os == 'macos-latest'
        run: flutter config --enable-macos-desktop

      # Platform-specific build commands
      - name: Build macOS application
        if: matrix.os == 'macos-latest'
        run: flutter build macos --release
        
      - name: Build Windows application
        if: matrix.os == 'windows-latest'
        run: flutter build windows --release

      # Package Windows app with Inno Setup
      - name: Install Inno Setup
        if: matrix.os == 'windows-latest'
        run: choco install innosetup -y
        
      - name: Compile Installer
        if: matrix.os == 'windows-latest'
        run: |
          & "C:\Program Files (x86)\Inno Setup 6\iscc.exe" /O"build\windows\installer" /DAppVersion=$env:APP_VERSION "windows\installer\inno_setup.iss"
          Get-ChildItem -Path "build\windows\installer"


      # Archive the built applications
      - name: Archive macOS build
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build
          path: build/macos/Build/Products/Release/*.app

      - name: Archive Windows installer
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: build\windows\installer\*.exe


      # Create GitHub Release when a tag is pushed
      - name: Release macOS app
        uses: softprops/action-gh-release@v2
        if: matrix.os == 'macos-latest' && startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build/macos/Build/Products/Release/*.app/**/*
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: false
          
      - name: Release Windows app
        uses: softprops/action-gh-release@v2
        if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            build\windows\x64\runner\Release\*.exe
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: false
      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
    #   - name: Analyze project source
    #     run: dart analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
    #   - name: Run tests
    #     run: dart test
 